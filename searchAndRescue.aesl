<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">var state

var STOP = 0
var READ = 1
var FAWAD = 2
var SCAN = 3
var TURN = 4
var STRAIGHT = 5
var L_TURN = 6
var REVERSE = 7
var R_TURN = 8
var FINISH = 9

var THRESHOLD = 3000
var SIDE_THRESHOLD = 2200
var GROUND_THRESHOLD = 125

var FAWAD_SPEED = 85
var STRAIGHT_SPEED = 300

var current[3] = [0,0,0]
var SAVED[3]

var RED[3] = [0,1,0]
var GREEN[3] = [1,1,0]
var BLUE[3] = [1,0,1]
var WHITE[3] = [0,0,1]

var circleLED[3] = [0,0,0]
var topLED[3] = [0,0,0]

var timeCounter[4] = [0,0,0,0]

var groundData
var horzData

var i
var sideSensors

timer.period[0] = 100

sub changeCircle
	call leds.circle(circleLED[1], circleLED[2], 0, 0, 0, 0, 0, circleLED[0])
sub changeTop
	call leds.top(topLED[0], topLED[1], topLED[2])
	
onevent timer0
	
	if state == TURN then
		timeCounter[0]++
		
		if timeCounter[0] &lt;= 10 * 5 then
			motor.left.target = -FAWAD_SPEED
			motor.right.target = -FAWAD_SPEED
		elseif timeCounter[0] > 10 * 5 and timeCounter[0] &lt;= 13 * 5 then
			motor.left.target = STRAIGHT_SPEED
			motor.right.target = 0
		else
			motor.left.target = 0
			motor.right.target = 0
			state = STRAIGHT
		end
	end
	
	if state == L_TURN then
		timeCounter[1]++
		
		if timeCounter[1] &lt;= 7 then
			motor.left.target = STRAIGHT_SPEED / 3 + 40
			motor.right.target = STRAIGHT_SPEED / 3 + 40
		elseif timeCounter[1] > 7 and timeCounter[1] &lt;= 23 then
			motor.left.target = 0
			motor.right.target = STRAIGHT_SPEED
		else
			motor.left.target = 0
			motor.right.target = 0
			state = FAWAD
		end
	end

	if state == R_TURN then
		timeCounter[2]++
		
		if timeCounter[2] &lt;= 4 * 5 then
			motor.left.target = 0
			motor.right.target = STRAIGHT_SPEED
		else
			motor.left.target = 0
			motor.right.target = 0
			state = FINISH
		end
	end
	
	if state == FINISH then
		timeCounter[3]++
		
		if timeCounter[3] &lt;= 5 * 5 then
			motor.left.target = STRAIGHT_SPEED
			motor.right.target = STRAIGHT_SPEED
		else
			if groundData >= 800 then
				motor.left.target = 0
				motor.right.target = 0
			end
		end
	end
onevent prox
	
	call math.stat(prox.horizontal[0:4], 0,0 , horzData)
	call math.stat(prox.ground.delta[0:1], 0,0, groundData)
    sideSensors = (prox.horizontal[0] + prox.horizontal[4]) / 2

	if state == STRAIGHT then
		motor.left.target = STRAIGHT_SPEED
		motor.right.target = STRAIGHT_SPEED
		
		if groundData &lt;= GROUND_THRESHOLD then
			motor.left.target = 0
			motor.right.target = 0
			state = L_TURN
		end
		
		if horzData >= THRESHOLD then
			state = FAWAD
		end
	end
		
	if state == FAWAD then
		timeCounter[0] = 0
		timeCounter[1] = 0
		
		motor.left.target = FAWAD_SPEED
		motor.right.target = FAWAD_SPEED
		
		if prox.ground.delta[0] > GROUND_THRESHOLD + 15 then
			motor.left.target = 20
			motor.right.target = 0
		end
		
		if prox.ground.delta[1] >= GROUND_THRESHOLD + 15 then
			motor.right.target = 20
			motor.left.target = 0
		end
				
		if sideSensors >= SIDE_THRESHOLD then
			motor.left.target = 20
			motor.right.target = 0
			state = SCAN
		end
	end
	
	if state == SCAN then
		for i in 1:3 do
			if prox.horizontal[i] &lt;= THRESHOLD then
				current[i-1] = 1
				circleLED[i-1] = 32
			else
				current[i-1] = 0
				circleLED[i-1] = 0
			end
		end
		
		if current[0] == RED[0] and current[1] == RED[1] and current[2] == RED[2] then
			topLED[0] = 32
			topLED[1] = 0
			topLED[2] = 0
		elseif current[0] == GREEN[0] and current[1] == GREEN[1] and current[2] == GREEN[2] then
			topLED[1] = 32
			topLED[2] = 0
			topLED[0] = 0
		elseif current[0] == BLUE[0] and current[1] == BLUE[1] and current[2] == BLUE[2] then
			topLED[2] = 32
			topLED[0] = 0
			topLED[1] = 0
		elseif current[0] == WHITE[0] and current[1] == WHITE[1] and current[2] == WHITE[2] then
			for i in 0:2 do
				topLED[i] = 32
			end
		else
			for i in 0:2 do
				topLED[i] = 0
				circleLED[i] = 0
			end
		end
		
		if current[0] == SAVED[0] and current[1] == SAVED[1] and current[2] == SAVED[2] then
			state = REVERSE
		else
			state = TURN
		end
		
		callsub changeCircle
		callsub changeTop
	end
	
	if state == REVERSE then
		motor.left.target = -STRAIGHT_SPEED
		motor.right.target = -STRAIGHT_SPEED
		
		if groundData >= 800 then
			motor.left.target = 0
			motor.right.target = 0
			state = R_TURN
		end
	end
	
onevent button.forward
	
	state = FAWAD
	
onevent button.right
	state = READ
	
	for i in 0:2 do
			topLED[i] = 0
			circleLED[i] = 0
			timeCounter[i] = 0
			current[i] = 0
			SAVED[i] = 0
			timeCounter[i] = 0
	end
	
	for i in 1:3 do
		if prox.horizontal[i] &lt;= THRESHOLD then
			SAVED[i-1] = 1
			circleLED[i-1] = 32
		end
	end
	
	if SAVED[0] == RED[0] and SAVED[1] == RED[1] and SAVED[2] == RED[2] then
		topLED[0] = 32
	elseif SAVED[0] == GREEN[0] and SAVED[1] == GREEN[1] and SAVED[2] == GREEN[2] then
		topLED[1] = 32
	elseif SAVED[0] == BLUE[0] and SAVED[1] == BLUE[1] and SAVED[2] == BLUE[2] then
		topLED[2] = 32
	elseif SAVED[0] == WHITE[0] and SAVED[1] == WHITE[1] and SAVED[2] == WHITE[2] then
		for i in 0:2 do
			topLED[i] = 32
		end	
	end
	
	callsub changeCircle
	callsub changeTop
	
onevent button.backward
	state = STOP
	
	for i in 0:2 do
		current[i] = 0
		circleLED[i] = 0
		topLED[i] = 0
		SAVED[i] = 0
		timeCounter[i] = 0
	end	
	
	motor.left.target = 0
	motor.right.target = 0
	timeCounter[0] = 0
	timeCounter[1] = 0
	callsub changeCircle
	callsub changeTop
	</node>


</network>
